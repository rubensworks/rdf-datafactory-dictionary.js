{"version":3,"file":"basic.js","sourceRoot":"","sources":["basic.ts"],"names":[],"mappings":";;AAAA,iDAAiD;AAGjD,wEAAmE;AACnE,0DAAqD;AAErD,aAAa;AACb,MAAM,YAAY,GAAG,OAAO,CAAC;AAC7B,MAAM,YAAY,GAAG,KAAK,CAAC;AAE3B,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IACf,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;AACjE,CAAC;AAED,MAAM,eAAe,GAAG,IAAI,6CAAqB,CAAC,IAAI,+BAAc,EAAE,CAAC,CAAC;AACxE,MAAM,IAAI,GAAa,EAAE,CAAC;AAC1B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,EAAE,CAAC;IACtC,IAAI,CAAC,IAAI,CAAC,0FAA0F,GAAG,CAAC,CAAC,CAAC;AAC5G,CAAC;AAED,SAAS;AACT,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;IACvB,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IAC9B,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AACjC,CAAC;AACD,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;AAE7B,iCAAiC;AACjC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;AAC5B,gBAAgB,CAAC,OAAO,EAAE,cAAc,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;AAC3D,gBAAgB,CAAC,OAAO,EAAE,eAAe,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;AAC5D,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;AAE7B,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAC3B,gBAAgB,CAAC,OAAO,EAAE,cAAc,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;AAC9D,gBAAgB,CAAC,OAAO,EAAE,eAAe,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;AAE/D,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAC3B,gBAAgB,CAAC,OAAO,EAAE,cAAc,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;AAC7D,gBAAgB,CAAC,OAAO,EAAE,eAAe,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;AAC9D,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;AAE7B,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAC3B,gBAAgB,CAAC,OAAO,EAAE,cAAc,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;AAC9D,gBAAgB,CAAC,OAAO,EAAE,eAAe,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;AAC/D,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;AAE7B,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AAC1B,gBAAgB,CAAC,OAAO,EAAE,cAAc,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;AAC3D,gBAAgB,CAAC,OAAO,EAAE,eAAe,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;AAC5D,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;AAE7B,0BAA0B,KAAa,EAAE,WAA4B,EAAE,KAAa,EAAE,YAAoB;IACxG,MAAM,KAAK,GAAG,EAAE,CAAC;IACjB,MAAM,GAAG,GAAG,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,YAAY,CAAC;IAC1D,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;QAC/B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC;IACD,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACvB,MAAM,CAAC,EAAE,EAAE,CAAC;IACZ,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;AACzF,CAAC;AAED,uBAAuB;AACvB;;;;;;;;;;;;;;;;GAgBG","sourcesContent":["import * as memDataFactory from \"rdf-data-model\";\nimport * as os from \"os\";\nimport * as RDF from \"rdf-js\";\nimport {DictionaryDataFactory} from \"../lib/DictionaryDataFactory\";\nimport {TermDictionary} from \"../lib/TermDictionary\";\n\n// Parameters\nconst COUNT_UNIQUE = 1000000;\nconst COUNT_EQUALS = 10000;\n\nif (!global.gc) {\n  throw new Error('--expose-gc must be passed as Node argument');\n}\n\nconst dictDataFactory = new DictionaryDataFactory(new TermDictionary());\nconst uris: string[] = [];\nfor (let i = 0; i < COUNT_UNIQUE; i++) {\n  uris.push('http://example.org/this/is/a/very/long/uri/with/a/very/long/path/and/some/number/suffix/' + i);\n}\n\n// Warmup\nfor (const uri of uris) {\n  memDataFactory.namedNode(uri);\n  dictDataFactory.namedNode(uri);\n}\ndictDataFactory.dict.clear();\n\n// Create many unique named nodes\nconsole.log('100% Unique:');\ncreateNamedNodes('  Mem', memDataFactory, COUNT_UNIQUE, 1);\ncreateNamedNodes('  Dct', dictDataFactory, COUNT_UNIQUE, 1);\ndictDataFactory.dict.clear();\n\nconsole.log('75% Unique:');\ncreateNamedNodes('  Mem', memDataFactory, COUNT_UNIQUE, 0.75);\ncreateNamedNodes('  Dct', dictDataFactory, COUNT_UNIQUE, 0.75);\n\nconsole.log('50% Unique:');\ncreateNamedNodes('  Mem', memDataFactory, COUNT_UNIQUE, 0.5);\ncreateNamedNodes('  Dct', dictDataFactory, COUNT_UNIQUE, 0.5);\ndictDataFactory.dict.clear();\n\nconsole.log('25% Unique:');\ncreateNamedNodes('  Mem', memDataFactory, COUNT_UNIQUE, 0.25);\ncreateNamedNodes('  Dct', dictDataFactory, COUNT_UNIQUE, 0.25);\ndictDataFactory.dict.clear();\n\nconsole.log('0% Unique:');\ncreateNamedNodes('  Mem', memDataFactory, COUNT_UNIQUE, 0);\ncreateNamedNodes('  Dct', dictDataFactory, COUNT_UNIQUE, 0);\ndictDataFactory.dict.clear();\n\nfunction createNamedNodes(label: string, dataFactory: RDF.DataFactory, count: number, uniqueFactor: number) {\n  const nodes = [];\n  const mod = uniqueFactor === 0 ? 1 : count * uniqueFactor;\n  console.time(label);\n  for (let i = 0; i < count; i++) {\n    nodes.push(dataFactory.namedNode(uris[i % mod]));\n  }\n  console.timeEnd(label);\n  global.gc();\n  console.log('    RAM: ' + Math.round(process.memoryUsage().rss / 1024 / 1024) + ' MB');\n}\n\n// equals() performance\n/*console.log('Equals');\ncompareEquals('  Mem', memDataFactory, COUNT_EQUALS);\ncompareEquals('  Dct', dictDataFactory, COUNT_EQUALS);\ndictDataFactory.dict.clear();\n\nfunction compareEquals(label: string, dataFactory: RDF.DataFactory, count: number) {\n  const nodes = [];\n  for (let i = 0; i < count; i++) {\n    nodes.push(dataFactory.namedNode(uris[i]));\n  }\n  console.time(label);\n  for (let i = 0; i < count; i++) {\n    nodes[i].equals(nodes[(i + count / 2) % count]);\n    nodes[i].equals(nodes[i]);\n  }\n  console.timeEnd(label);\n}*/\n"]}